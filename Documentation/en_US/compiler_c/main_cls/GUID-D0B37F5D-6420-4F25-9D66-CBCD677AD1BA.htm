<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns:MSHelp="http://www.microsoft.com/MSHelp/" lang="en-us" xml:lang="en-us"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="DC.Type" content="concept">
<meta name="DC.Title" content="Restrictions on Offloaded Code Using a Pragma">
<meta name="DC.subject" content="restrictions on offloaded code">
<meta name="keywords" content="restrictions on offloaded code">
<meta name="DC.Relation" scheme="URI" content="GUID-44F5B8E2-8EFD-4C51-ACF8-357900798834.htm">
<meta name="DC.Relation" scheme="URI" content="GUID-392F7939-278C-4EE7-BAE3-55F9AB42759F.htm#GUID-392F7939-278C-4EE7-BAE3-55F9AB42759F">
<meta name="DC.Relation" scheme="URI" content="http://www.intel.com/software/products/softwaredocs_feedback">
<meta name="DC.Format" content="XHTML">
<meta name="DC.Identifier" content="GUID-D0B37F5D-6420-4F25-9D66-CBCD677AD1BA">
<meta name="DC.Language" content="en-US">
<link rel="stylesheet" type="text/css" href="intel_css_styles.css">
<title>Restrictions on Offloaded Code Using a Pragma</title>
<xml>
<MSHelp:Attr Name="DocSet" Value="Intel"></MSHelp:Attr>
<MSHelp:Attr Name="Locale" Value="kbEnglish"></MSHelp:Attr>
<MSHelp:Keyword Index="F" Term="intel.cpp.cncpt_code_restrictions"></MSHelp:Keyword>
<MSHelp:Attr Name="TopicType" Value="kbReference"></MSHelp:Attr>
</xml>
</head>
<body id="GUID-D0B37F5D-6420-4F25-9D66-CBCD677AD1BA">
 <!-- ==============(Start:NavScript)================= -->
 <script src="NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
 <script language="JavaScript1.2" type="text/javascript">WriteNavLink(0);</script>
 <!-- ==============(End:NavScript)================= -->
<p id="header_text" style="margin-bottom : 20pt"><em>Intel&reg; C++ Compiler XE 13.1 User and Reference Guides</em></p>


 
  <h1 class="topictitle1">Restrictions on Offloaded Code Using a 
	 <span>Pragma</span></h1>
 
   
  <div> 
	 <p><span id="d67e97"><a name="d67e97"><!-- --></a>This topic only applies to Intel&reg; Many Integrated Core Architecture (Intel&reg; MIC Architecture).</span> 
          </p>
 
	 <p> Offloaded code has the following restrictions: 
	 </p>
 
	 <ul type="disc" id="GUID-95C70AE4-4CC4-44F1-B2DC-8FED66FC2CFA"> 
		<li> 
		  <p>Exception handling may be done as usual within code running on the CPU and within code running on the coprocessor. So exceptions can be raised, caught and handled on the CPU, or raised, caught and handled on the coprocessor. However it is not possible to propagate an exception from the coprocessor to the CPU. 
		  </p>
 
		</li>
 
		<li> 
		  <p id="RESTRICTION__MIC__INTEL_OFFLOAD"><a name="RESTRICTION__MIC__INTEL_OFFLOAD"><!-- --></a>Do not use the 
			 <samp class="codeph">__MIC__</samp> macro inside the statement following a 
			 <samp class="codeph">#pragma offload 
			 </samp> statement. You can, however, use this macro in a subprogram called from the<span> pragma</span>. 
		  </p>
 
		</li>
 
		<li> 
		  <p>Multiple host CPU threads can execute concurrently while one host CPU thread offloads a section of code. In this case synchronization mechanisms such as locks, atomics, mutexes, OpenMP atomic operations, OpenMP critical, OpenMP taskwait, OpenMP barriers, etc. do not work between host CPU code and code offloaded to the target. However, if parallelism on the host CPU is enabled using OpenMP, then OpenMP synchronization at the end of a parallel region is guaranteed to work even if some part of the OpenMP parallel region has been offloaded to the target. 
		  </p>
 
		</li>
 
		<li> 
		  <p> Global variables referenced by functions called from within offloaded code must be declared with matching target attributes to ensure that the variable is available on the target. The offloaded code cannot access the host CPU global variables. This is enforced by the compiler. 
		  </p>
 
		  <p> By default, pointer variables are assumed to point to a single element of the corresponding type. The offloaded code may dereference the pointer and access a single element. The data element pointed to is automatically copied into target memory and the pointer value adjusted accordingly. The 
			 <var>element-count-expr</var> expression available with 
			 <samp class="codeph">in</samp> / 
			 <samp class="codeph">out</samp> / 
			 <samp class="codeph">inout</samp> parameters enable variable-length data to be copied back and forth. 
		  </p>
 
		</li>
 
		<li> 
		  <p> Only pointers to non-pointer types are supported. 
			  Pointers to pointer variables are not supported. The compiler enforces this restriction. 
		  </p>
 
		</li>
 
		<li> 
		  <p>Arrays are supported provided the array element type is a scalar or bitwise copyable 
			 <span>struct or class</span>. 
			 <span>So arrays of pointers are not supported.</span> 
			 </p>
 
		</li>
 
		<li> 
		  <p> Because pointers are not copied across the host-target interface, but instead the data they point to is copied, do not assume that the relative distance between pointers that point to distinct variables remains the same between the host and target. Pointers within the same data structure still have the same distance between them after offload. Thus, some pointer comparisons and arithmetic that were meaningful on the host CPU can no longer be used reliably on the target. 
		  </p>
 
		</li>
 
		<li> 
		  <p> Similarly, although the data pointed to is available after offload, the program cannot assume that the same user variable is pointed to after variable. For example, consider the following line of code: 
		  </p>
 
		  <samp class="codeph"> {int a = 55; int *p = &amp;a; #pragma offload { q = p; ... }</samp> 
		  <p>Although 
			 <samp class="codeph">q</samp> on the target will point to the value 55, the value of 
			 <samp class="codeph">q</samp> will not be 
			 <samp class="codeph">&amp;a</samp> on the target. 
		  </p>
 
		</li>
 
		<li> 
		  <p> Unions containing a combination of pointer and non-pointer members are treated as holding the non-pointer value type. Thus, no special treatment is given to the pointer, and the data pointed to is not copied to the target. 
		  </p>
 
		</li>
 
		<li> 
		  <p> Unions consisting entirely of pointer members are not allowed to be copied between the host and the target. 
		  </p>
 
		</li>
 
		<li> 
		  <p> If an offloaded statement calls a function defined in a separate file and that function references global variables, then those global variables cannot be copied in or out because the references are not visible to the compiler. Those variables are copied in or out if they are also referenced in the offloaded statement. 
		  </p>
 
		  <p>Global variables such as these must be explicitly named in 
			 <samp class="codeph">in</samp> and 
			 <samp class="codeph">out</samp> clauses in the offload specification. When these global variables are file-scope static variables, then they cannot be named in the 
			 <samp class="codeph">in</samp> or 
			 <samp class="codeph">out</samp> clauses. You need to access their values using one of the following methods: 
		  </p>
 
		  <ul type="disc" id="GUID-66633022-5AE9-4D44-833F-6E61CD24C869"> 
			 <li> 
				<p> Make them external and add them to the 
				  <samp class="codeph">in</samp> or 
				  <samp class="codeph">out</samp> clauses in the offload specification. 
				</p>
 
			 </li>
 
			 <li> 
				<p> Fetch the variable values into local variables using functions designed specifically for that purpose, and then add the local variables to the 
				  <samp class="codeph">in</samp> or 
				  <samp class="codeph">out</samp> clauses. 
				</p>
 
			 </li>
 
		  </ul>
 
		</li>
 
		<li> 
		  <p>You cannot use objects that are not bitwise copyable, 
			 <span>such as the 
				<samp class="codeph">ostream</samp> object 
				<samp class="codeph">std::cout</samp>,</span> inside a 
			 <samp class="codeph">#pragma offload</samp> region. The compiler enforces this restriction and issues an error<span> such as: 
				<samp class="codeph">error: variable "std::cout" is not bitwise copyable 
				</samp></span>. 
		  </p>
 
		</li>
 
		<li> 
		  <p>There are three Intel&reg; Cilk&#8482; Plus constructs: 
			 <span class="keyword">_Cilk_spawn</span>, 
			 <span class="keyword">_Cilk_sync</span>, and 
			 <span class="keyword">_Cilk_for</span>. You can use all of these in functions called from a 
			 <samp class="codeph">#pragma offload</samp> construct, but you can only use 
			 <span class="keyword">_Cilk_for</span> directly within the offloaded construct. You cannot use 
			 <span class="keyword">_Cilk_spawn</span> and 
			 <span class="keyword">_Cilk_sync</span> within a 
			 <samp class="codeph">#pragma offload</samp> construct, because it is illegal to offload only a portion of an Intel&reg; Cilk&#8482; Plus spawning routine. The whole spawning routine must be offloaded. 
		  </p>
 
		  <p>For example, the following code is illegal: 
		  </p>
 
		  <pre>
#pragma offload target(mic)
{
     _Cilk_spawn f();     // _Cilk_spawn used within 
}                         // offloaded construct
</pre> 
		  <p>The following code is legal: 
			 <pre>
#pragma offload target(mic)
{
                g();
}

...

void g()
{
     _Cilk_spawn f();     // _Cilk_spawn used within
}                         // offloaded function
</pre> 
		  </p>
 
		</li>
 
	 </ul>
 
  </div>
 
  
<div class="familylinks">
<div class="parentlink"><strong>Parent topic:</strong>&nbsp;<a href="GUID-44F5B8E2-8EFD-4C51-ACF8-357900798834.htm">Offload Using a Pragma</a></div>
</div>
<div class="See Also"><h2>See Also</h2>
<div class="linklist">
<div><a href="GUID-392F7939-278C-4EE7-BAE3-55F9AB42759F.htm#GUID-392F7939-278C-4EE7-BAE3-55F9AB42759F">Writing Target-Specific Code 
		  </a></div></div><br clear="all">
<div class="docfeedback">
<div><a href="http://www.intel.com/software/products/softwaredocs_feedback" target="_blank">Submit feedback on this help topic 
		  </a></div></div></div> 

</body>
</html>
