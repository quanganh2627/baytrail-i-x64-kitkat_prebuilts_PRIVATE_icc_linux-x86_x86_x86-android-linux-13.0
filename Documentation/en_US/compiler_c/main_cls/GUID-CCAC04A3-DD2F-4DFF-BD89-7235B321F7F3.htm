<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns:MSHelp="http://www.microsoft.com/MSHelp/" lang="en-us" xml:lang="en-us"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="DC.Type" content="topic">
<meta name="DC.Title" content="Placing Variables and Functions on the Coprocessor">
<meta name="abstract" content="These attributes ensure that variables and functions are available on the coprocessor.">
<meta name="description" content="These attributes ensure that variables and functions are available on the coprocessor.">
<meta name="DC.subject" content="variables, placing on the coprocessor, functions, placing on the coprocessor, attribute for placing variables and functions on coprocessor">
<meta name="keywords" content="variables, placing on the coprocessor, functions, placing on the coprocessor, attribute for placing variables and functions on coprocessor">
<meta name="DC.Relation" scheme="URI" content="GUID-44F5B8E2-8EFD-4C51-ACF8-357900798834.htm">
<meta name="DC.Relation" scheme="URI" content="GUID-04443E95-5630-4275-9484-C19FD53FC842.htm#GUID-04443E95-5630-4275-9484-C19FD53FC842">
<meta name="DC.Relation" scheme="URI" content="http://www.intel.com/software/products/softwaredocs_feedback">
<meta name="DC.Format" content="XHTML">
<meta name="DC.Identifier" content="GUID-CCAC04A3-DD2F-4DFF-BD89-7235B321F7F3">
<meta name="DC.Language" content="en-US">
<link rel="stylesheet" type="text/css" href="intel_css_styles.css">
<title>Placing Variables and Functions on the Coprocessor</title>
<xml>
<MSHelp:Attr Name="DocSet" Value="Intel"></MSHelp:Attr>
<MSHelp:Attr Name="Locale" Value="kbEnglish"></MSHelp:Attr>
<MSHelp:Keyword Index="F" Term="intel.cpp.tpc_put_data_fctn_on_target"></MSHelp:Keyword>
<MSHelp:Attr Name="TopicType" Value="kbReference"></MSHelp:Attr>
</xml>
</head>
<body id="GUID-CCAC04A3-DD2F-4DFF-BD89-7235B321F7F3">
 <!-- ==============(Start:NavScript)================= -->
 <script src="NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
 <script language="JavaScript1.2" type="text/javascript">WriteNavLink(0);</script>
 <!-- ==============(End:NavScript)================= -->
<p id="header_text" style="margin-bottom : 20pt"><em>Intel&reg; C++ Compiler XE 13.1 User and Reference Guides</em></p>


 
  <h1 class="topictitle1">Placing Variables and Functions on the Coprocessor</h1>
 
  <!--These attributes ensure that variables and functions are available on the coprocessor. 
  --> 
   
  <div><p>These attributes ensure that variables and functions are available on the coprocessor. 
  </p>
 
	 <p><span id="d67e97"><a name="d67e97"><!-- --></a>This topic only applies to Intel&reg; Many Integrated Core Architecture (Intel&reg; MIC Architecture).</span> 
          </p>
 
	 <p>The statement following the offload 
		<span>pragma</span> 
		 is converted into an outlined function that runs on the coprocessor. This code is permitted to call other functions. To ensure that these called functions are also available on the coprocessor, you must specify one of the following special function attributes: 
	 </p>
 
	 <pre>__declspec( target (mic)) function-declaration

__declspec( target (mic))variable-declaration

__attribute__ (( target (mic))) function-declaration

__attribute__ (( target (mic))) variable-declaration</pre> 
	 <p> All functions in the program are always compiled for the CPU and are available to be called on the CPU. However, only functions marked with the special attribute are available to be called by offloaded code, and only these functions can be called on the coprocessor. 
	 </p>
 
	 <p> Global variables are treated in a similar fashion. All global variables are always present in the CPU code. But only global variables with the target attribute are compiled into the binary offloaded to the coprocessor. 
	 </p>
 
	 <p> Compiling only functions and data explicitly marked with the target attribute into the Intel&reg; MIC Architecture binary ensures that the code on the coprocessor is as small as possible. 
	 </p>
 
	 <p> The compiler issues warnings for functions and data referenced within offloaded code that do not have the target attribute. 
	 </p>
 
	 <div class="section" id="GUID-B41C38A2-3216-4F8A-BBD6-930397F13A27"><h2 class="sectiontitle">Example</h2> 
		 
		<pre>__declspec(target(mic))
 int global = 55;

__declspec(target(mic))
 int foo()
{
	return ++global;
}
main()
{
	int i;
	#pragma offload target(mic) in(global) out(i, global)
	{
		i = foo();
	}
	printf("global = %d, i = %d (should be the same)\n",
			global, i);
}</pre> 
		</div>
 
	 <div class="Note"><h3 class="NoteTipHead">Note</h3> 
		<p>The presence of a function call within an offloaded construct with a target attribute does not automatically declare that function as available on that target. The function definition must include the appropriate target attribute to ensure that the function is available on the target. 
		</p>
 
	 </div> 
	 <div class="Note"><h3 class="NoteTipHead">Note</h3> 
		<p>The definition and all declarations of a variable or function with a target attribute must be consistent with each other across all compilation units. 
		</p>
 
	 </div> 
  </div>
 
  
<div class="familylinks">
<div class="parentlink"><strong>Parent topic:</strong>&nbsp;<a href="GUID-44F5B8E2-8EFD-4C51-ACF8-357900798834.htm">Offload Using a Pragma</a></div>
</div>
<div class="See Also"><h2>See Also</h2>
<div class="linklist">
<div><a href="GUID-04443E95-5630-4275-9484-C19FD53FC842.htm#GUID-04443E95-5630-4275-9484-C19FD53FC842">offload-attribute-target 
		  </a>  
		  </div></div><br clear="all">
<div class="docfeedback">
<div><a href="http://www.intel.com/software/products/softwaredocs_feedback" target="_blank">Submit feedback on this help topic 
		  </a></div></div></div> 

</body>
</html>
