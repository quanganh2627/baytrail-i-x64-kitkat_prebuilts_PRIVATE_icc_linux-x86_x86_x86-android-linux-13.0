<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns:MSHelp="http://www.microsoft.com/MSHelp/" lang="en-us" xml:lang="en-us"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="DC.Type" content="topic">
<meta name="DC.Title" content="code coverage Tool">
<meta name="DC.subject" content="-prof-gen:srcpos compiler option, code coverage tool, -prof-use compiler option, .dpi file, .dyn file, .spi file, /Qprof-gen:srcpos compiler option, /Qprof-use compiler option, /Qcov-gen compiler option, ALLOCATABLE, basic block, code coverage, visual presentation, PGO tools, color scheme, dynamic counters in, exporting data, syntax of, differential coverage, exclude code, explicit-shape arrays, .dpi, .dyn, .spi, pgopti.dpi, pgopti.spi, tool options">
<meta name="keywords" content="-prof-gen:srcpos compiler option, code coverage tool, -prof-use compiler option, .dpi file, .dyn file, .spi file, /Qprof-gen:srcpos compiler option, /Qprof-use compiler option, /Qcov-gen compiler option, ALLOCATABLE, basic block, code coverage, visual presentation, PGO tools, color scheme, dynamic counters in, exporting data, syntax of, differential coverage, exclude code, explicit-shape arrays, .dpi, .dyn, .spi, pgopti.dpi, pgopti.spi, tool options">
<meta name="DC.Relation" scheme="URI" content="GUID-4805E249-9CAF-4C51-870E-EFBEC81A4D13.htm">
<meta name="DC.Relation" scheme="URI" content="http://www.intel.com/software/products/softwaredocs_feedback">
<meta name="DC.Format" content="XHTML">
<meta name="DC.Identifier" content="GUID-2B837E96-077E-4183-878D-00A25968752C">
<meta name="DC.Language" content="en-US">
<link rel="stylesheet" type="text/css" href="intel_css_styles.css">
<title>code coverage Tool</title>
<xml>
<MSHelp:Attr Name="DocSet" Value="Intel"></MSHelp:Attr>
<MSHelp:Attr Name="Locale" Value="kbEnglish"></MSHelp:Attr>
<MSHelp:Keyword Index="F" Term="optaps_pgo_covr"></MSHelp:Keyword>
<MSHelp:Keyword Index="F" Term="intel.cpp.optaps_pgo_covr"></MSHelp:Keyword>
<MSHelp:Attr Name="TopicType" Value="kbReference"></MSHelp:Attr>
</xml>
</head>
<body id="GUID-2B837E96-077E-4183-878D-00A25968752C">
 <!-- ==============(Start:NavScript)================= -->
 <script src="NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
 <script language="JavaScript1.2" type="text/javascript">WriteNavLink(0);</script>
 <!-- ==============(End:NavScript)================= -->
<p id="header_text" style="margin-bottom : 20pt"><em>Intel&reg; C++ Compiler XE 13.1 User and Reference Guides</em></p>


 
  <h1 class="topictitle1">code coverage Tool</h1>
 
   
  <div> 
	 <p>The code coverage tool provides software developers with a view of how much application code is exercised when a specific workload is applied to the application. To determine which code is used, the code coverage tool uses Profile-guided Optimization (PGO) options and optimizations. The major features of the code coverage tool are: 
	 </p>
 
	 <ul type="disc" id="GUID-8F05D4E5-5D13-4F7A-A010-DB5AF2C0E10B"> 
		<li> 
		  <p>Visually presenting code coverage information for an application with a customizable code coverage coloring scheme 
		  </p>
 
		</li>
 
		<li> 
		  <p>Displaying dynamic execution counts of each basic block of the application 
		  </p>
 
		</li>
 
		<li> 
		  <p>Providing differential coverage, or comparison, profile data for two runs of an application 
		  </p>
 
		</li>
 
	 </ul>
 
	 <p>The information about using the code coverage tool is separated into the following sections: 
	 </p>
 
	 <ul type="disc" id="GUID-0EE07334-338A-4F6B-8DC1-F1F2A959DC61"> 
		<li> 
		  <p><a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#REQUIREMENTS">code coverage tool Requirements</a> 
		  </p>
 
		</li>
 
		<li> 
		  <p><a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#VISUALLY"><span>Visually Presenting Code Coverage for an Application</span></a> 
		  </p>
 
		</li>
 
		<li> 
		  <p><a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#EXCLUDING"><span>Excluding Code from Coverage Analysis</span></a> 
		  </p>
 
		</li>
 
		<li> 
		  <p><a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#EXPORTING"><span>Exporting Coverage Data</span></a> 
		  </p>
 
		</li>
 
	 </ul>
 
	 <p>The tool analyzes static profile information generated by the compiler, as well as dynamic profile information generated by running an instrumented form of the application binaries on the workload. The tool can generate the in HTML-formatted report and export data in both text-, and XML-formatted files. The reports can be further customized to show color-coded, annotated, source-code listings that distinguish between used and unused code. 
	 </p>
 
	 <p>The code coverage tool is available on all supported Intel architectures on Linux*, Windows*, and OS X* operating systems. 
	 </p>
 
	 <p>You can use the tool in a number of ways to improve development efficiency, reduce defects, and increase application performance: 
	 </p>
 
	 <ul type="disc" id="GUID-E6331E43-7213-441F-A4F8-F938CCADFF4D"> 
		<li> 
		  <p>During the project testing phase, the tool can measure the overall quality of testing by showing how much code is actually tested. 
		  </p>
 
		</li>
 
		<li> 
		  <p>When applied to the profile of a performance workload, the code coverage tool can reveal how well the workload exercises the critical code in an application. High coverage of performance-critical modules is essential to taking full advantage of the Profile-Guided Optimizations that Intel Compilers offer. 
		  </p>
 
		</li>
 
		<li> 
		  <p>The tool provides an option, useful for both coverage and performance tuning, enabling developers to display the dynamic execution count for each basic block of the application. 
		  </p>
 
		</li>
 
		<li> 
		  <p>The code coverage tool can compare the profile of two different application runs. This feature can help locate portions of the code in an application that are unrevealed during testing but are exercised when the application is used outside the test space, for example, when used by a customer. 
		  </p>
 
		</li>
 
	 </ul>
 
	 <div class="section" id="REQUIREMENTS"><a name="REQUIREMENTS"><!-- --></a><h2 class="sectiontitle">code coverage tool Requirements</h2> 
		 
		<p>To run the code coverage tool on an application, you must have following items: 
		</p>
 
		<ul type="disc" id="GUID-276A1465-92BB-4996-8A46-654B64E80C60"> 
		  <li> 
			 <p>The application sources. 
			 </p>
 
		  </li>
 
		  <li> 
			 <p>The .spi file generated by the Intel&reg; compiler when compiling the application for the instrumented binaries using the 
		<span class="option">-prof-gen=srcpos</span> (Linux and OS X) or 
		<span class="option">/Qprof-gen:srcpos</span> (Windows) option. 
		<div class="Note"><h3 class="NoteTipHead">Note</h3> 
		  <p>Use the 
		  <span class="option">–[Q]prof-gen:srcpos</span> option if you intend to use the collected data for code coverage and profile feedback. If you are only interested in using the instrumentation for code coverage, use the 
		  <span class="option">/Qcov-gen 
		  </span>option. Using the 
		  <span class="option">/Qcov-gen</span> option saves time and improves performance. This option can be used only on Windows platform for all architectures. 
		  </p>
 
		</div> 
		</p>
 
		</li>
 
		<li> 
		  <p>A 
			 <span class="filepath">pgopti.dpi</span> file that contains the results of merging the dynamic profile information (.dyn) files, which is most easily generated by the 
			 <a href="GUID-9E804DFC-FA37-402C-BD54-856965D1A8BF.htm#GUID-9E804DFC-FA37-402C-BD54-856965D1A8BF">profmerge and proforder Tools</a> tool. This file is also generated implicitly by the Intel&reg; compilers when compiling an application with 
		<span class="option">-prof-use</span> (Linux and OS X) or 
		<span class="option">/Qprof-use</span> (Windows) options with available .dyn and .dpi files. 
		</p>
 
		</li>
 
		</ul>
 
		<p>See 
		  <a href="GUID-B5DF6C43-542E-4C9D-8AB2-A951E0DFD45F.htm#GUID-B5DF6C43-542E-4C9D-8AB2-A951E0DFD45F">Profile an Application</a> and 
		  <a href="GUID-B5DF6C43-542E-4C9D-8AB2-A951E0DFD45F.htm#GUID-B5DF6C43-542E-4C9D-8AB2-A951E0DFD45F">Profile an Application</a> for general information on creating the files needed to run this tool. 
		</p>
 
		<p><strong>Using the Tool</strong> 
		</p>
 
		<p>The tool uses the following syntax: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-DC695449-5363-4BC4-9F40-B422CC8839E9" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e350"> 
					 <p>Tool Syntax 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e350 "> 
					 <p><samp class="codeph">codecov [-codecov_option]</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>where 
		<span class="option">-codecov_option</span> is one or more optional parameters specifying the tool option passed to the tool. The available tool options are listed in the 
		<a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1">code coverage tools Options</a> section. If you do not use any additional tool options, the tool will provide the 
		<a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#TOP">top-level</a> code coverage for the entire application. 
		</p>
 
		<p>In general, you must perform the following steps to use the code coverage tool: 
		</p>
 
		<ol id="GUID-129D679C-BD96-4A4B-8016-CC22262C26AA"> 
		  <li> 
			 <p>Compile the application using 
		<span class="option">-prof-gen=srcpos</span> (Linux and OS X) or 
		<span class="option">/Qprof-gen:srcpos</span> (Windows), and/or 
		<span class="option">/Qcov-gen</span> (Windows) option. 
		</p>
 
		<p>This step generates an instrumented executable and a corresponding static profile information (<span class="filepath">pgopti.spi</span>) file when the 
		<span class="option">-[Q]prof-gen=srcpos</span> option is used. When the 
		<span class="option">/Qcov-gen</span> option is used, minimum instrumentation only for code coverage and generation of .spi file is enabled. 
		</p>
 
		<div class="Note"><h3 class="NoteTipHead">Note</h3> 
		  <p>You can specify both the 
		  <span class="option">/Qprof-gen=srcpos</span> and<span class="option"> /Qcov-gen</span> options on the command line. The higher level of instrumentation needed for profile feedback is enabled along with the profile option for generating the .spi file, regardless of the order the options are specified on the command line. 
		  </p>
 
		</div> 
		</li>
 
		<li> 
		  <p>Run the instrumented application. 
		  </p>
 
		  <p>This step creates the dynamic profile information (.dyn) file Each time you run the instrumented application, the compiler generates a unique .dyn file either in the current directory or the directory specified in by 
			 <span class="keyword">prof_dir</span>. 
		  </p>
 
		</li>
 
		<li> 
		  <p>Use the 
			 <a href="GUID-9E804DFC-FA37-402C-BD54-856965D1A8BF.htm#GUID-9E804DFC-FA37-402C-BD54-856965D1A8BF">profmerge and proforder Tools</a> tool to merge all the .dyn files into one .dpi (<span class="filepath">pgopti.dpi</span>) file. 
		  </p>
 
		  <p>This step consolidates results from all runs and represents the total profile information for the application, generates an optimized binary, and creates the dpi file needed by the code coverage tool. 
		  </p>
 
		  <p>You can use the profmerge tool to merge the .dyn files into a .dpi file without recompiling the application. The profmerge tool can also merge multiple .dpi files into one .dpi file using the 
			 <samp class="codeph">profmerge -a</samp> option. Select the name of the output .dpi file using the 
			 <samp class="codeph">profmerge -prof_dpi</samp> option. 
		  </p>
 
		  <div class="Note"><h3 class="NoteTipHead">Caution</h3> 
			 <p>The profmerge tool merges all .dyn files that exist in the given directory. Make sure unrelated .dyn files, which may remain from unrelated runs, are not present. Otherwise, the profile information will be skewed with invalid profile data, which can result in misleading coverage information and adverse performance of the optimized code. 
			 </p>
 
		  </div> 
		</li>
 
		<li> 
		  <p>Run the code coverage tool. (The valid syntax and tool options are shown below.) 
		  </p>
 
		  <p>This step creates a report or exported data as specified. If no other options are specified, the code coverage tool creates a single HTML file (CODE_COVERAGE.HTML) and a sub-directory (CodeCoverage) in the current directory. Open the file in a web browser to view the reports. 
		  </p>
 
		</li>
 
		</ol>
 
		<div class="Note"><h3 class="NoteTipHead">Note</h3> 
		  <p>Windows* only: Unlike the compiler options, which are preceded by forward slash ("/"), the tool options are preceded by a hyphen ("-"). 
		  </p>
 
		</div> 
		<p>The code coverage tool allows you to name the project and specify paths to specific, necessary files. The following example demonstrates how to name a project and specify .dpi and .spi files to use: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-2777F4B4-3A9A-4504-9654-A6EE8BCEF410" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e504"> 
					 <p>Example: specify .dpi and .spi files 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e504 "> 
					 <p><samp class="codeph">codecov -prj myProject -spi pgopti.spi -dpi pgopti.dpi</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>The tool can add a contact name and generate an email link for that contact at the bottom of each HTML page. This provides a way to send an electronic message to the named contact. The following example demonstrates how to add specify a contact and the email links: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-2E3231AC-6AD3-44DB-BEE7-16CDA1A60E3B" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e540"> 
					 <p>Example: add contact information 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e540 "> 
					 <p><samp class="codeph">codecov -prj myProject -mname JoeSmith -maddr js@company.com</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>This following example demonstrates how to use the tool to specify the project name, specify the dynamic profile information file, and specify the output format and file name. 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-6D4E6EB3-22C1-4BF3-A754-7EC851003150" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e576"> 
					 <p>Example: export data to text 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e576 "> 
					 <p><samp class="codeph">codecov -prj test1 -dpi test1.dpi -txtbcvrg test1_bcvrg.txt</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p id="OPTS1"><a name="OPTS1"><!-- --></a><strong>code coverage tool Options</strong> 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-B845E5FF-3169-4516-A587-81F8B80C1ACE" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			  
			  
			  
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="25%" id="d131200e620"> 
					 <p>Option 
					 </p>
 
				  </th>
 
				  <th class="cellrowborder" align="left" valign="top" width="15%" id="d131200e626"> 
					 <p>Default 
					 </p>
 
				  </th>
 
				  <th class="cellrowborder" align="left" valign="top" width="60%" id="d131200e632"> 
					 <p>Description 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-bcolor</span> 
						<var>color</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 "> 
					 <p>#FFFF99 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the HTML color name for code in the uncovered blocks. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-beginblkdsbl</span> 
						<var>string</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the comment that marks the beginning of the code fragment to be ignored by the coverage tool. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-ccolor</span> 
						<var>color</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 "> 
					 <p>#FFFFFF 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the HTML color name or code of the covered code. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-comp</span> 
						<var>file</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the file name that contains the list of files being (or not) displayed. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-counts</span> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Generates dynamic execution counts. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-demang</span> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Demangles both function names and their arguments. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-dpi</span> 
						<var>file</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 "> 
					 <p><span class="filepath">pgopti.dpi</span> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the file name of the dynamic profile information file (.dpi). 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-endblkdsbl</span> 
						<var>string</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the comment that marks the end of the code fragment to be ignored by the coverage tool. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-fcolor</span> 
						<var>color</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 "> 
					 <p>#FFCCCC 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the HTML color name for code of the uncovered functions. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-help</span>, 
						<span class="keyword">-h</span> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Prints tool option descriptions. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-icolor</span> 
						<var>color</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 "> 
					 <p>#FFFFFF 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the HTML color name or code of the information lines, such as basic-block markers and dynamic counts. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-maddr</span> 
						<var>string</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 "> 
					 <p>Nobody 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Sets the email address of the web-page owner 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-mname</span> 
						<var>string</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 "> 
					 <p>Nobody 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Sets the name of the web-page owner. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-nopartial</span> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Treats partially covered code as fully covered code. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-nopmeter</span> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Turns off the progress meter. The meter is enabled by default. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-onelinedsbl</span> 
						<span class="keyword">string</span> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the comment that marks individual lines of code or the whole functions to be ignored by the coverage tool. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-pcolor</span> 
						<var>color</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 "> 
					 <p>#FAFAD2 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the HTML color name or code of the partially covered code. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-prj</span> 
						<var>string</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Sets the project name. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-ref</span> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Finds the differential coverage with respect to ref_dpi_file. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-spi</span> 
						<var>file</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 "> 
					 <p><samp class="codeph">pgopti.spi</samp> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the file name of the static profile information file (.spi). 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-srcroot</span> 
						<var>dir</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies a different top level project directory than was used during compiler instrumentation run to use for relative paths to source files in place of absolute paths. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-txtbcvrg</span> 
						<var>file</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Export block-coverage for covered functions as text format. The file parameter must be in the form of a valid file name. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-txtbcvrgfull</span> 
						<var>file</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Export block-coverage for entire application in text and HTML formats. The file parameter must be in the form of a valid file name. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-txtdcg</span> 
						<var>file</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Generates the dynamic call-graph information in text format. The file parameter must be in the form of a valid file name. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-txtfcvrg</span> 
						<var>file</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Export function coverage for covered function in text format. The file parameter must by in the form of a valid file name. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-ucolor</span> 
						<var>color</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 "> 
					 <p>#FFFFFF 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the HTML color name or code of the unknown code. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-xcolor</span> 
						<var>color</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 "> 
					 <p>#90EE90 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Specifies the HTML color of the code ignored. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-xmlbcvrg</span> 
						<var>file</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Export the block-coverage for the covered function in XML format. The file parameter must by in the form of a valid file name. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-xmlbcvrgfull</span> 
						<var>file</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Export function coverage for entire application in XML format in addition to HTML output. The file parameter must be in the form of a valid file name. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e620 "> 
					 <p><span class="keyword">-xmlfcvrg</span> 
						<var>file</var> 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e626 ">&#xA0;</td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e632 "> 
					 <p>Export function coverage for covered function in XML format. The file parameter must be in the form of a valid file name. 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
	 </div>
 
	 <div class="section" id="VISUALLY"><a name="VISUALLY"><!-- --></a><h2 class="sectiontitle">Visually Presenting Code Coverage for an Application</h2> 
		 
		<p>Based on the profile information collected from running the instrumented binaries when testing an application, the Intel&reg; compiler will create HTML-formatted reports using the code coverage tool. These reports indicate portions of the source code that were or were not exercised by the tests. When applied to the profile of the performance workloads, the code coverage information shows how well the training workload covers the application's critical code. High coverage of performance-critical modules is essential to taking full advantage of the profile-guided optimizations. 
		</p>
 
		<p>The code coverage tool can create two levels of coverage: 
		</p>
 
		<ul type="disc" id="GUID-835A937A-0FA6-48C9-8E94-050C2C66EA8F"> 
		  <li> 
			 <p>Top level (for a group of selected modules) 
			 </p>
 
		  </li>
 
		  <li> 
			 <p>Individual module source views 
			 </p>
 
		  </li>
 
		</ul>
 
		<p id="TOP"><a name="TOP"><!-- --></a><strong>Top Level Coverage</strong> 
		</p>
 
		<p>The top-level coverage reports the overall code coverage of the modules that were selected. The following options are provided: 
		</p>
 
		<ul type="disc" id="GUID-453370CA-4B87-4690-A124-48AAFAF184CA"> 
		  <li> 
			 <p>Select the modules of interest 
			 </p>
 
		  </li>
 
		  <li> 
			 <p>For the selected modules, the tool generates a list with their coverage information. The information includes the total number of functions and blocks in a module and the portions that were covered. 
			 </p>
 
		  </li>
 
		  <li> 
			 <p>By clicking on the title of columns in the reported tables, the lists may be sorted in ascending or descending order based on: 
			 </p>
 
			 <ul type="disc" id="GUID-8300109C-66A7-4AA2-B229-158F72BF0BBD"> 
				<li> 
				  <p>basic block coverage 
				  </p>
 
				</li>
 
				<li> 
				  <p>function coverage 
				  </p>
 
				</li>
 
				<li> 
				  <p>function name 
				  </p>
 
				</li>
 
			 </ul>
 
		  </li>
 
		</ul>
 
		<p>By default, the code coverage tool generates a single HTML file (CODE_COVERAGE.HTML) and a subdirectory (CodeCoverage) in the current directory. The HTML file defines a frameset to display all of the other generated reports. Open the HTML file in a web-browser. The tool places all other generated report files in a CodeCoverage subdirectory. 
		</p>
 
		<p>If you choose to generate the html-formatted version of the report, you can view coverage source of that particular module directly from a browser. The following figure shows the top-level coverage report. 
		</p>
 
		<p><br><img src="GUID-40B5E548-E501-4F0E-89D1-EF234904C2F2-low.gif"><br> 
		</p>
 
		<p>The coverage tool creates a frame set that allows quick browsing through the code to identify uncovered code. The top frame displays the list of uncovered functions while the bottom frame displays the list of covered functions. For uncovered functions, the total number of basic blocks of each function is also displayed. For covered functions, both the total number of blocks and the number of covered blocks as well as their ratio (that is, the coverage rate) are displayed. 
		</p>
 
		<p>For example, 66.67(4/6) indicates that four out of the six blocks of the corresponding function were covered. The block coverage rate of that function is thus 66.67%. These lists can be sorted based on the coverage rate, number of blocks, or function names. Function names are linked to the position in source view where the function body starts. So, just by one click, you can see the least-covered function in the list and by another click the browser displays the body of the function. You can scroll down in the source view and browse through the function body. 
		</p>
 
		<p><strong>Individual Module Source View</strong> 
		</p>
 
		<p>Within the individual module source views, the tool provides the list of uncovered functions as well as the list of covered functions. The lists are reported in two distinct frames that provide easy navigation of the source code. The lists can be sorted based on: 
		</p>
 
		<ul type="disc" id="GUID-E34C5D4F-1D12-4AF8-89D8-85DE7E53F766"> 
		  <li> 
			 <p>Number of blocks within uncovered functions 
			 </p>
 
		  </li>
 
		  <li> 
			 <p>Block coverage in the case of covered functions 
			 </p>
 
		  </li>
 
		  <li> 
			 <p>Function names 
			 </p>
 
		  </li>
 
		</ul>
 
		<p><strong>Setting the Coloring Scheme for the Code Coverage</strong> 
		</p>
 
		<p>The tool provides a visible coloring distinction of the following coverage categories: covered code, uncovered basic blocks, uncovered functions, partially covered code, and unknown code. The default colors that the tool uses for presenting the coverage information are shown in the tables that follows: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-A006A811-2ADF-4A41-801E-8A95E64A64B9" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			  
			  
			  
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="25%" id="d131200e1490"> 
					 <p>Category 
					 </p>
 
				  </th>
 
				  <th class="cellrowborder" align="left" valign="top" width="15%" id="d131200e1496"> 
					 <p>Default 
					 </p>
 
				  </th>
 
				  <th class="cellrowborder" align="left" valign="top" width="60%" id="d131200e1502"> 
					 <p>Description 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e1490 "> 
					 <p>Covered code 
					 </p>
 
				  </td>
 
				  <td class="bgcolor(#FFFFFF)" bgcolor="#FFFFFF" valign="top" width="15%" headers="d131200e1496 "> 
					 <p>#FFFFFF 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e1502 "> 
					 <p>Indicates code was exercised by the tests. You can override the default color with the 
						<a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-ccolor</span> tool option</a>. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e1490 "> 
					 <p>Uncovered basic block 
					 </p>
 
				  </td>
 
				  <td class="bgcolor(#FFFF99)" bgcolor="#FFFF99" valign="top" width="15%" headers="d131200e1496 "> 
					 <p>#FFFF99 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e1502 "> 
					 <p>Indicates the basic blocks that were not exercised by any of the tests. However, these blocks were within functions that were executed during the tests. You can override the default color with the 
						<a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-bcolor</span> tool option</a>. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e1490 "> 
					 <p>Uncovered function 
					 </p>
 
				  </td>
 
				  <td class="bgcolor(#FFCCCC)" bgcolor="#FFCCCC" valign="top" width="15%" headers="d131200e1496 "> 
					 <p>#FFCCCC 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e1502 "> 
					 <p>Indicates functions that were never called during the tests. You can override the default color with the 
						<a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-fcolor</span> tool option</a>. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e1490 "> 
					 <p>Partially covered code 
					 </p>
 
				  </td>
 
				  <td class="bgcolor(#FAFAD2)" bgcolor="#FAFAD2" valign="top" width="15%" headers="d131200e1496 "> 
					 <p>#FAFAD2 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e1502 "> 
					 <p>Indicates that more than one basic block was generated for the code at this position. Some of the blocks were covered and some were not. You can override the default color with the 
						<a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-pcolor</span> tool option</a>. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e1490 "> 
					 <p>Ignored code 
					 </p>
 
				  </td>
 
				  <td class="bgcolor(#90EE90)" bgcolor="#90EE90" valign="top" width="15%" headers="d131200e1496 "> 
					 <p>#90EE90 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e1502 "> 
					 <p>Indicates code that was specifically marked to be ignored. You can override this default color using the 
						<a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-xcolor</span> tool option</a>. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e1490 "> 
					 <p>Information lines 
					 </p>
 
				  </td>
 
				  <td class="bgcolor(#FFFFFF)" bgcolor="#FFFFFF" valign="top" width="15%" headers="d131200e1496 "> 
					 <p>#FFFFFF 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e1502 "> 
					 <p>Indicates basic-block markers and dynamic counts. You can override the default color with the 
						<a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-icolor</span> tool option</a>. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="25%" headers="d131200e1490 "> 
					 <p>Unknown 
					 </p>
 
				  </td>
 
				  <td class="bgcolor(#FFFFFF)" bgcolor="#FFFFFF" valign="top" width="15%" headers="d131200e1496 "> 
					 <p>#FFFFFF 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="60%" headers="d131200e1502 "> 
					 <p>Indicates that no code was generated for this source line. Most probably, the source at this position is a comment, a header-file inclusion, or a variable declaration. You can override the default color with the 
						<a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-ucolor</span> tool option</a>. 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>The default colors can be customized to be any valid HTML color name or hexadecimal value using the options mentioned for each coverage category in the table above. 
		</p>
 
		<p>For code coverage colored presentation, the coverage tool uses the following heuristic: source characters are scanned until reaching a position in the source that is indicated by the profile information as the beginning of a basic block. If the profile information for that basic block indicates that a coverage category changes, then the tool changes the color corresponding to the coverage condition of that portion of the code, and the coverage tool inserts the appropriate color change in the HTML-formatted report files. 
		</p>
 
		<div class="Note"><h3 class="NoteTipHead">Note</h3> 
		  <p>You need to interpret the colors in the context of the code. For instance, comment lines that follow a basic block that was never executed would be colored in the same color as the uncovered blocks. 
			 <span>Another example is the closing brackets in C/C++ applications.</span> 
		  </p>
 
		</div> 
		<p><strong>Dynamic Counters</strong> 
		</p>
 
		<p>The coverage tool can be configured to generate the information about the dynamic execution counts. This ability can display the dynamic execution count of each basic block of the application and is useful for both coverage and performance tuning. 
		</p>
 
		<p>The custom configuration requires using the 
		  <a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-counts</span> option</a>. The counts information is displayed under the code after a "^" sign precisely under the source position where the corresponding basic block begins. 
		</p>
 
		<p>If more than one basic block is generated for the code at a source position (for example, for macros), then the total number of such blocks and the number of the blocks that were executed are also displayed in front of the execution count. For example, line 11 in the code is an 
		  <span class="keyword">if</span> statement: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-0AB05086-8124-46FA-A778-CBC0A31E4E51" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e1753"> 
					 <p>Example 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e1753 "> 
					 <pre>11  if ((N == 1).OR. (N == 0))</pre> 
					 <pre>     ^ 10 (1/2)</pre> 
					 <pre>12      printf("%d\n", N)</pre> 
					 <pre>        ^</pre> 
				  </td>
 
				</tr>
 
				</tbody>
 
		  </table>
</div>
 
		<p>The coverage lines under code lines 11 and 12 contain the following information: 
		</p>
 
		<ul type="disc" id="GUID-37F26E1A-2E20-46D4-A689-8C9F50721768"> 
		  <li> 
			 <p>The 
				<span class="keyword">IF</span> statement in line 11 was executed 10 times. 
			 </p>
 
		  </li>
 
		  <li> 
			 <p>Two basic blocks were generated for the 
				<span class="keyword">IF</span> statement in line 11. 
			 </p>
 
		  </li>
 
		  <li> 
			 <p>Only one of the two blocks was executed, hence the partial coverage color. 
			 </p>
 
		  </li>
 
		  <li> 
			 <p>Only seven out of the ten times variable n had a value of 0 or 1. 
			 </p>
 
		  </li>
 
		</ul>
 
		<p>In certain situations, it may be desirable to consider all the blocks generated for a single source position as one entity. In such cases, it is necessary to assume that all blocks generated for one source position are covered when at least one of the blocks is covered. This assumption can be configured with the 
		  <a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-nopartial</span> option</a>. When this option is specified, decision coverage is disabled, and the related statistics are adjusted accordingly. The code lines 11 and 12 indicate that the 
		  <span class="keyword">print</span> statement in line 12 was covered. However, only one of the conditions in line 11 was ever true. With the 
		<span class="option">-nopartial</span> option, the tool treats the partially covered code (like the code on line 11) as covered. 
		</p>
 
		<p id="DIFF_COV"><a name="DIFF_COV"><!-- --></a><strong>Differential Coverage</strong> 
		</p>
 
		<p>Using the code coverage tool, you can compare the profiles from two runs of an application: a reference run and a new run identifying the code that is covered by the new run but not covered by the reference run. Use this feature to find the portion of the applications code that is not covered by the applications tests but is executed when the application is run by a customer. It can also be used to find the incremental coverage impact of newly added tests to an applications test space. 
		</p>
 
		<p><strong>Generating Reference Data</strong> 
		</p>
 
		<p>Create the dynamic profile information for the reference data, which can be used in differential coverage reporting later, by using the 
		  <a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-ref</span> option</a>. The following command demonstrate a typical command for generating the reference data: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-51BA70D3-4876-463B-9D65-281BF6B14B5A" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e1867"> 
					 <p>Example: generating reference data 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e1867 "> 
					 <p><samp class="codeph">codecov -prj Project_Name -dpi customer.dpi -ref appTests.dpi</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>The coverage statistics of a differential-coverage run shows the percentage of the code exercised on a new run but missed in the reference run. In such cases, the tool shows only the modules that included the code that was not covered. Keep this in mind when viewing the coloring scheme in the source views. 
		</p>
 
		<p>The code that has the same coverage property (covered or not covered) on both runs is considered as covered code. Otherwise, if the new run indicates that the code was executed while in the reference run the code was not executed, then the code is treated as uncovered. On the other hand, if the code is covered in the reference run but not covered in the new run, the differential-coverage source view shows the code as covered. 
		</p>
 
		<p><strong>Running Differential Coverage</strong> 
		</p>
 
		<p>To run the code coverage tool for differential coverage, you must have the application sources, the .spi file, and the .dpi file, as described in the 
		  <a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#REQUIREMENTS">code coverage tool Requirements</a> section (above). 
		</p>
 
		<p>Once the required files are available, enter a command similar to the following begin the process of differential coverage analysis: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-08785335-5105-4EA4-8895-4FFA887DE422" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e1922"> 
					 <p>Example 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e1922 "> 
					 <p><samp class="codeph">codecov -prj Project_Name -spi pgopti.spi -dpi pgopti.dpi</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>Specify the .dpi and .spi files using the 
		  <a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-spi</span> and 
			 <span class="option">-dpi</span> options</a>. 
		</p>
 
	 </div>
 
	 <div class="section" id="EXCLUDING"><a name="EXCLUDING"><!-- --></a><h2 class="sectiontitle">Excluding Code from Coverage Analysis</h2> 
		 
		<p>The code coverage tool allows you to exclude portions of your code from coverage analysis. This ability can be useful during development; for example, certain portions of code might include functions used for debugging only. The test case should not include tests for functionality that will unavailable in the final application. 
		</p>
 
		<p>Another example of code that can be excluded is code that might be designed to deal with internal errors unlikely to occur in the application. In such cases, not having a test case lack of a test case is preferred. You might want to ignore infeasible (dead) code in the coverage analysis. The code coverage tool provides several options for marking portions of the code infeasible (dead) and ignoring the code at the file level, function level, line level, and arbitrary code boundaries indicated by user-specific comments. The following sections explain how to exclude code at different levels. 
		</p>
 
		<p><strong>Including and Excluding Coverage at the File Level</strong> 
		</p>
 
		<p>The code coverage tool provides the ability to selectively include or exclude files for analysis. Create a component file and add the appropriate string values that indicate the file and directory name for code you want included or excluded. Pass the file name as a parameter of the 
		  <a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-comp</span> option</a>. The following example shows the general command: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-53DE348A-3A3A-492E-9EA2-B3F5D0D398C4" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e1994"> 
					 <p>Example: specifying a component file 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e1994 "> 
					 <p><samp class="codeph">codecov -comp 
						  <var>file</var></samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>where 
		  <var>file</var> is the name of a text file containing strings that ask as file and directory name masks for including and excluding file-level analysis. For example, assume that the following: 
		</p>
 
		<ul type="disc" id="GUID-391CC026-036A-4A21-9266-296996ECF27F"> 
		  <li> 
			 <p>You want to include all files with the string "source" in the file name or directory name. 
			 </p>
 
		  </li>
 
		  <li> 
			 <p>You create a component text file named 
				<span class="filepath">myComp.txt</span> with the selective inclusion string. 
			 </p>
 
		  </li>
 
		</ul>
 
		<p>Once you have a component file, enter a command similar to the following: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-F505C2BA-1587-4455-AA46-BC57D8CA3147" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2056"> 
					 <p>Example 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2056 "> 
					 <p><samp class="codeph">codecov -comp myComp.txt</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>In this example, individual files name including the string "source" (like source1.<span>c</span> and source2.<span>c</span>) and files in directories where the name contains the string "source" (like source/file1.<span>c</span> and source2\file2.<span>c</span> ) are include in the analysis. 
		</p>
 
		<p>Excluding files is done in the same way; however, the string must have a tilde (~) prefix. The inclusion and exclusion can be specified in the same component file. 
		</p>
 
		<p>For example, assume you want to analyze all individual files or files contained in a directory where the name included the string "source", and you wanted to exclude all individual file and files contained in directories where the name included the string "skip". You would add content similar to the following to the component file (<span class="filepath">myComp.txt</span>) and pass it to the 
		<span class="option">-comp</span> option: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-74C32A72-3082-4015-97E2-9B1C1BF65653" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2117"> 
					 <p>Example: inclusion and exclusion strings 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2117 "> 
					 <p><samp class="codeph">source</samp> 
					 </p>
 
					 <p><samp class="codeph">~skip</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>Entering the 
		  <samp class="codeph">codecov -comp myComp.txt</samp> command with both instructions in the component file will instruct the tool to include individual files where the name contains "source" (like source1.<span>c</span> and source2.<span>c</span>) and directories where the name contains "source" (like source/file1.<span>c</span> and source2\file2.<span>c</span> ), and exclude any individual files where the name contains "skip" (like skipthis1.<span>c</span> and skipthis2.<span>c</span>) or directories where the name contains "skip" (like skipthese1\debug1.<span>c</span> and skipthese2\debug2.<span>c</span>). 
		</p>
 
		<p><strong>Excluding Coverage at the Line and Function Level</strong> 
		</p>
 
		<p>You can mark individual lines for exclusion my passing string values to the 
		  <a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-onelinedsbl</span> option</a>. For example, assume that you have some code similar to the following: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-1C27E5FF-A1E8-4960-B384-DDD204336679" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2201"> 
					 <p>Sample code 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2201 "> 
					 <pre>printf ("internal error 123 - please report!\n");  // NO_COVER</pre> 
					 <pre>printf ("internal error 456 - please report!\n");  /* INF IA-32 architecture */</pre> 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p> If you wanted to exclude all functions marked with the comments NO_COVER or INF IA-32 architecture, you would enter a command similar to the following. 
		</p>

		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-AC620C8F-3D91-4072-988C-4B571A37F93A" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2238"> 
					 <p>Example 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2238 "> 
					 <p><samp class="codeph">codecov -onelinedsbl NO_COVER -onelinedsbl "INF IA-32 architecture"</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>You can specify multiple exclusion strings simultaneously, and you can specify any string values for the markers; however, you must remember the following guidelines when using this option: 
		</p>
 
		<ul type="disc" id="GUID-01D90E0F-74A1-4A76-A9AF-7AD483642230"> 
		  <li> 
			 <p>Inline comments must occur at the end of the statement. 
			 </p>
 
		  </li>
 
		  <li> 
			 <p>The string must be a part of an inline comment. 
			 </p>
 
		  </li>
 
		</ul>
 
		<p>An entire function can be excluded from coverage analysis using the same methods. For example, the following function will be ignored from the coverage analysis when you issue example command shown above. 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-4BBC8031-13A2-407B-B8FC-CE686E7893DF" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2293"> 
					 <p>Sample code 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2293 "> 
					 <pre>void dumpInfo (int n)</pre> 
					 <pre>{      // NO_COVER</pre> 
					 <pre>...</pre> 
					 <pre>}</pre> 
				  </td>
 
				</tr>
 
				</tbody>
 
		  </table>
</div>
 
		<p>Additionally, you can use the code coverage tool to color the infeasible code with any valid HTML color code by combining the 
		<span class="option">-onelinedsbl</span> and 
		<a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-xcolor</span> options</a>. The following example commands demonstrate the combination: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-AF245E84-FE46-4C8B-BC79-09F13227A3E1" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2345"> 
					 <p>Example: combining tool options 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2345 "> 
					 <p><samp class="codeph">codecov -onelinedsbl INF -xcolor lightgreen</samp> 
					 </p>
 
					 <p><samp class="codeph">codecov -onelinedsbl INF -xcolor #CCFFCC</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p><strong>Excluding Code by Defining Arbitrary Boundaries</strong> 
		</p>
 
		<p>The code coverage tool provides the ability to arbitrarily exclude code from coverage analysis. This feature is most useful where the excluded code either occur inside of a function or spans several functions. 
		</p>
 
		<p>Use the 
		  <a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-beginblkdsbl</span> and 
			 <span class="option">-endblkdsbl</span> options</a> to mark the beginning and end, respectively, of any arbitrarily defined boundary to exclude code from analysis. Remember the following guidelines when using these options: 
		</p>
 
		<ul type="disc" id="GUID-AA2A5A5D-E1A3-49F4-90D0-12A71F207887"> 
		  <li> 
			 <p>Inline comments must occur at the end of the statement. 
			 </p>
 
		  </li>
 
		  <li> 
			 <p>The string must be a part of an inline comment. 
			 </p>
 
		  </li>
 
		</ul>
 
		<p>For example assume that you have the following code: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-F843773D-E932-43DD-8ADB-BE8B9DFEE8D8" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2422"> 
					 <p>Sample code 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2422 "> 
					 <pre>void div (int m, int n)</pre> 
					 <pre>{</pre> 
					 <pre>if (n == 0)</pre> 
					 <pre>/* BEGIN_INF */</pre> 
					 <pre>{</pre> 
					 <pre>printf (internal error 314 please report\n);</pre> 
					 <pre>recover ();</pre> 
					 <pre>}</pre> 
					 <pre>/* END_INF */</pre> 
					 <pre>else {</pre> 
					 <pre>...</pre> 
					 <pre>}</pre> 
					 <pre>}</pre> 
					 <pre>...</pre> 
					 <pre>// BINF</pre> 
					 <pre>Void recover ()</pre> 
					 <pre>{</pre> 
					 <pre>...</pre> 
					 <pre>}</pre> 
					 <pre>// EINF</pre> 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>The following example commands demonstrate how to use the 
		<span class="option">-beginblkdsbl</span> option to mark the beginning and the 
		<span class="option">-endblkdsbl</span> option to mark the end of code to exclude from the sample shown above. 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-DBE004AA-ACD0-4C0C-8CF5-6C4D11CC9567" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2522"> 
					 <p>Example: arbitrary code marker commands 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2522 "> 
					 <p><samp class="codeph">codecov -xcolor #ccFFCC -beginblkdsbl BINF -endblkdsbl EINF</samp> 
					 </p>
 
					 <p><samp class="codeph">codecov -xcolor #ccFFCC -beginblkdsbl "BEGIN_INF" -endblkdsbl "END_INF"</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>Notice that you can combine these options in combination with the 
		<span class="option">-xcolor</span> option. 
		</p>
 
	 </div>
 
	 <div class="section" id="EXPORTING"><a name="EXPORTING"><!-- --></a><h2 class="sectiontitle">Exporting Coverage Data</h2> 
		 
		<p>The code coverage tool provides specific options to extract coverage data from the dynamic profile information (.dpi files) that result from running instrumented application binaries under various workloads. The tool can export the coverage data in various formats for post-processing and direct loading into databases: the default HTML, text, and XML. You can choose to export data at the function and basic block levels. 
		</p>
 
		<p>There are two basic methods for exporting the data: quick export and combined export. Each method has associated options supported by the tool 
		</p>
 
		<ul type="disc" id="GUID-3CE3C40E-4B70-4E08-9950-83C222FC25F7"> 
		  <li> 
			 <p><strong>Quick export:</strong> The first method is to export the data coverage to text- or XML-formatted files without generating the default HTML report. The application sources need not be present for this method. The code coverage tool creates reports and provides statistics only about the portions of the application executed. The resulting analysis and reporting occurs quickly, which makes it practical to apply the coverage tool to the dynamic profile information (the .dpi file) for every test case in a given test space instead of applying the tool to the profile of individual test suites or the merge of all test suites. The 
		<span class="option">-xmlfcvrg</span>, 
		<span class="option">-txtfcvrg</span>, 
		<span class="option">-xmlbcvrg</span> and 
		<span class="option">-txtbcvrg</span> options support the first method. 
		</p>
 
		</li>
 
		<li> 
		  <p><strong>Combined export:</strong> The second method is to generate the default HTML and simultaneously export the data to text- and XML-formatted files. This process is slower than first method since the application sources are parsed and reports generated. The 
		<span class="option">-xmlbcvrgfull</span> and 
		<span class="option">-txtbcvrgfull</span> options support the second method. 
		</p>
 
		</li>
 
		</ul>
 
		<p>These export methods provide the means to quickly extend the code coverage reporting capabilities by supplying consistently formatted output from the code coverage tool. You can extend these by creating additional reporting tools on top of these report files. 
		</p>
 
		<p><strong>Quick Export</strong> 
		</p>
 
		<p>The profile of covered functions of an application can be exported quickly using the 
		<span class="option">-xmlfcvrg</span>, 
		<span class="option">-txtfcvrg</span>, 
		<span class="option">-xmlbcvrg</span>, and 
		<span class="option">-txtbcvrg</span> options. When using any of these options, specify the output file that will contain the coverage report. For example, enter a command similar to the following to generate a report of covered functions in XML formatted output: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-8C5C1C79-BA8C-40A5-AA03-2C1FBD27156F" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2640"> 
					 <p>Example: quick export of function data 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2640 "> 
					 <p><samp class="codeph">codecov -prj test1 -dpi test1.dpi -xmlfcvrg test1_fcvrg.xml</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>The resulting report will show how many times each function was executed and the total number of blocks of each function together with the number of covered blocks and the block coverage of each function. The following example shows some of the content of a typical XML report. 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-B6417B09-EED4-471A-AFA4-625F56ED734D" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2676"> 
					 <p>XML-formatted report example 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2676 "> 
					 <pre>&lt;PROJECT name = "test1"&gt;</pre> 
					 <pre>   &lt;MODULE name = "D:\SAMPLE.<span>C</span>"&gt;</pre> 
					 <pre>      &lt;FUNCTION name="f0" freq="2"&gt;</pre> 
					 <pre>         &lt;BLOCKS total="6" covered="5" coverage="83.33%"&gt;&lt;/BLOCKS&gt;</pre> 
					 <pre>      &lt;/FUNCTION&gt;</pre> 
					 <pre>      ...</pre> 
					 <pre>   &lt;/MODULE&gt;</pre> 
					 <pre>   &lt;MODULE name = "D:\SAMPLE2.<span>C</span>"&gt;</pre> 
					 <pre>      ...</pre> 
					 <pre>   &lt;/MODULE&gt;</pre> 
					 <pre>&lt;/PROJECT&gt;</pre> 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>In the above example, we note that function f0, which is defined in file sample.<span>c</span>, has been executed twice. It has a total number of six basic blocks, five of which are executed, resulting in an 83.33% basic block coverage. 
		</p>
 
		<p>You can also export the data in text format using the 
		<span class="option">-txtfcvrg</span> option. The generated text report, using this option, for the above example would be similar to the following example: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-2880CA41-2335-4298-8AE0-8AB0F6D84B0A" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2757"> 
					 <p>Text-formatted report example 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2757 "> 
					 <pre>Covered Functions in File: "D:\SAMPLE.<span>C</span>"</pre> 
					 <pre>"f0"    2       6       5        83.33</pre> 
					 <pre>"f1"    1       6       4        66.67</pre> 
					 <pre>"f2"    1       6       3        50.00</pre> 
					 <pre>...</pre> 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>In the text formatted version of the report, the each line of the report should be read in the following manner: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-00E74B7B-E27D-4E6B-87C9-2154EBD0979B" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="15%" id="d131200e2810"> 
					 <p>Column 1 
					 </p>
 
				  </th>
 
				  <th class="cellrowborder" align="left" valign="top" width="15%" id="d131200e2816"> 
					 <p>Column 2 
					 </p>
 
				  </th>
 
				  <th class="cellrowborder" align="left" valign="top" width="15%" id="d131200e2822"> 
					 <p>Column 3 
					 </p>
 
				  </th>
 
				  <th class="cellrowborder" align="left" valign="top" width="15%" id="d131200e2828"> 
					 <p>Column 4 
					 </p>
 
				  </th>
 
				  <th class="cellrowborder" align="left" valign="top" width="40%" id="d131200e2834"> 
					 <p>Column 5 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e2810 "> 
					 <p>function name 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e2816 "> 
					 <p>execution frequency 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e2822 "> 
					 <p>line number of the start of the function definition 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="15%" headers="d131200e2828 "> 
					 <p>column number of the start of the function definition 
					 </p>
 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="40%" headers="d131200e2834 "> 
					 <p>percentage of basic-block coverage of the function 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>Additionally, the tool supports exporting the block level coverage data using the 
		  <a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-xmlbcvrg</span> option</a>. For example, enter a command similar to the following to generate a report of covered blocks in XML formatted output: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-7A587A3A-744C-470A-B9C6-D9DB0ADF01AE" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2898"> 
					 <p>Example: quick export of block data to XML 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2898 "> 
					 <p><samp class="codeph">codecov -prj test1 -dpi test1.dpi -xmlbcvrg test1_bcvrg.xml</samp> 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>The example command shown above would generate XML-formatted results similar to the following: 
		</p>
 
		
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-6162DEF9-2319-44C2-930D-25A6B6908177" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
			 <thead align="left"> 
				<tr valign="top"> 
				  <th class="cellrowborder" align="left" valign="top" width="100%" id="d131200e2935"> 
					 <p>XML-formatted report example 
					 </p>
 
				  </th>
 
				</tr>
 
			 </thead>
 
			 <tbody> 
				<tr valign="top"> 
				  <td class="cellrowborder" valign="top" width="100%" headers="d131200e2935 "> 
					 <pre>&lt;PROJECT name = "test1"&gt;</pre> 
					 <pre>  &lt;MODULE name = "D:\SAMPLE.c<span>pp</span>"&gt;</pre> 
					 <pre>    &lt;FUNCTION name="f0" freq="2"&gt;</pre> 
					 <pre>    ...</pre> 
					 <pre>      &lt;BLOCK line="11" col="2"&gt;</pre> 
					 <pre>        &lt;INSTANCE id="1" freq="1"&gt; &lt;/INSTANCE&gt;</pre> 
					 <pre>      &lt;/BLOCK&gt;</pre> 
					 <pre>      &lt;BLOCK line="12" col="3"&gt;</pre> 
					 <pre>        &lt;INSTANCE id="1" freq="2"&gt; &lt;/INSTANCE&gt;</pre> 
					 <pre>        &lt;INSTANCE id="2" freq="1"&gt; &lt;/INSTANCE&gt;</pre> 
					 <pre>      &lt;/BLOCK&gt;</pre> 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
		<p>In the sample report, notice that one basic block is generated for the code in function f0 at the line 11, column 2 of the file sample.<span>cpp</span>. This particular block has been executed only once. Also notice that there are two basic blocks generated for the code that starts at line 12, column 3 of file. One of these blocks, which has id = 1, has been executed two times, while the other block has been executed only once. A similar report in text format can be generated through the 
		<span class="option">-txtbcvrg</span> option. 
		</p>
 
		<p><strong>Combined Exports</strong> 
		</p>
 
		<p>The code coverage tool has also the capability of exporting coverage data in the default HTML format while simultaneously generating the text- and XML-formatted reports. 
		</p>
 
		<p>Use the 
		  <a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-xmlbcvrgfull</span> and 
			 <span class="option">-txtbcvrgfull</span> options</a> to generate reports in all supported formatted in a single run. These options export the basic-block level coverage data while simultaneously generating the HTML reports. These options generate more complete reports since they include analysis on functions that were not executed at all. However, exporting the coverage data using these options requires access to application source files and take much longer to run. 
		</p>
 
		<p><strong>Dynamic Call Graphs</strong> 
		</p>
 
		<p>Using the 
		  <a href="GUID-2B837E96-077E-4183-878D-00A25968752C.htm#OPTS1"><span class="option">-txtdcg</span> option</a> the tool can provide detailed information about the dynamic call graphs in an application. Specify an output file for the dynamic call-graph report. The resulting call graph report contains information about the percentage of static and dynamic calls (direct, indirect, and virtual) at the application, module, and function levels. 
		</p>
 
	 </div>
 
  </div>
 
  
<div class="familylinks">
<div class="parentlink"><strong>Parent topic:</strong>&nbsp;<a href="GUID-4805E249-9CAF-4C51-870E-EFBEC81A4D13.htm">Tools</a></div>
</div>
<div><br clear="all">
<div class="docfeedback">
<div><a href="http://www.intel.com/software/products/softwaredocs_feedback" target="_blank">Submit feedback on this help topic 
		  </a></div></div></div> 

</body>
</html>
