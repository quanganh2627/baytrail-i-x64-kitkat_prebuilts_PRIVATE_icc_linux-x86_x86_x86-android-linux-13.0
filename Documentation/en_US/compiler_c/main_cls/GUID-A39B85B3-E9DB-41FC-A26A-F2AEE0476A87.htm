<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns:MSHelp="http://www.microsoft.com/MSHelp/" lang="en-us" xml:lang="en-us"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="DC.Type" content="topic">
<meta name="DC.Title" content="IPO for Large Programs">
<meta name="DC.subject" content="compiling large programs, interprocedural optimizations, considerations, large programs">
<meta name="keywords" content="compiling large programs, interprocedural optimizations, considerations, large programs">
<meta name="DC.Relation" scheme="URI" content="GUID-2C521F58-6303-4748-9736-A59A5B73B025.htm">
<meta name="DC.Relation" scheme="URI" content="http://www.intel.com/software/products/softwaredocs_feedback">
<meta name="DC.Format" content="XHTML">
<meta name="DC.Identifier" content="GUID-A39B85B3-E9DB-41FC-A26A-F2AEE0476A87">
<meta name="DC.Language" content="en-US">
<link rel="stylesheet" type="text/css" href="intel_css_styles.css">
<title>IPO for Large Programs</title>
<xml>
<MSHelp:Attr Name="DocSet" Value="Intel"></MSHelp:Attr>
<MSHelp:Attr Name="Locale" Value="kbEnglish"></MSHelp:Attr>
<MSHelp:Keyword Index="F" Term="optaps_ipo_large"></MSHelp:Keyword>
<MSHelp:Keyword Index="F" Term="intel.cpp.optaps_ipo_large"></MSHelp:Keyword>
<MSHelp:Attr Name="TopicType" Value="kbReference"></MSHelp:Attr>
</xml>
</head>
<body id="GUID-A39B85B3-E9DB-41FC-A26A-F2AEE0476A87">
 <!-- ==============(Start:NavScript)================= -->
 <script src="NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
 <script language="JavaScript1.2" type="text/javascript">WriteNavLink(0);</script>
 <!-- ==============(End:NavScript)================= -->
<p id="header_text" style="margin-bottom : 20pt"><em>Intel&reg; C++ Compiler XE 13.1 User and Reference Guides</em></p>


 
  <h1 class="topictitle1">IPO for Large Programs</h1>
 
  
  <div> 
	 <p>In most cases, IPO generates a single object file for the link-time compilation. This behavior is not optimal for very large programs, perhaps even making it impossible to use 
		<span><a href="GUID-FEF23B3B-D0F6-484F-8DC5-9AB1315A6431.htm#GUID-FEF23B3B-D0F6-484F-8DC5-9AB1315A6431"><span class="option">-ipo</span></a> (Linux* and OS X*) or 
		</span><a href="GUID-FEF23B3B-D0F6-484F-8DC5-9AB1315A6431.htm#GUID-FEF23B3B-D0F6-484F-8DC5-9AB1315A6431"><span class="option">/Qipo</span></a> (Windows*) on the application.
	 </p>
 
	 <p>The compiler provides two methods to avoid this problem. The first method is an automatic size-based heuristic, which causes the compiler to generate multiple object files for large link-time compilations. The second method is to manually instruct the compiler to perform multi-object IPO.
	 </p>
 
	 <ul type="disc" id="GUID-54A1F007-83C7-483C-B11C-516996D69DFA"> 
		<li>
		  <p>Use the<span> 
				<span class="option">-ipo</span><var>N</var> (Linux and OS X) or</span> 
  <span class="option">/Qipo</span><var>N</var> (Windows) option and pass an integer value in the place of 
  <var>N</var>.
  </p>

  </li>
 
  <li>
	 <p>Use the<span> 
		  <a href="GUID-9D233AC0-BDB6-405D-A51A-F45CC081C9D4.htm#GUID-9D233AC0-BDB6-405D-A51A-F45CC081C9D4"><span class="option">-ipo-separate</span></a> (Linux and OS X) or</span> 
		<a href="GUID-9D233AC0-BDB6-405D-A51A-F45CC081C9D4.htm#GUID-9D233AC0-BDB6-405D-A51A-F45CC081C9D4"><span class="option">/Qipo-separate</span></a> (Windows) option. 
	 </p>
 
	 <p>The number of true object files generated by the link-time compilation is invisible to you unless the 
		<a href="GUID-CE89F74F-97DD-4C0F-8D11-9B723172218C.htm#GUID-CE89F74F-97DD-4C0F-8D11-9B723172218C"><span class="option">-ipo-c</span></a> or 
		<a href="GUID-7E9D1246-3877-4745-AF64-FDE874BA5299.htm#GUID-7E9D1246-3877-4745-AF64-FDE874BA5299"><span class="option">-ipo-S</span></a> (Linux and OS X) or 
		<a href="GUID-CE89F74F-97DD-4C0F-8D11-9B723172218C.htm#GUID-CE89F74F-97DD-4C0F-8D11-9B723172218C"><span class="option">/Qipo-c</span></a> or 
		<a href="GUID-7E9D1246-3877-4745-AF64-FDE874BA5299.htm#GUID-7E9D1246-3877-4745-AF64-FDE874BA5299"><span class="option">/Qipo-S</span></a> (Windows) option is used.
	 </p>

  </li>
 
  </ul>
 
  <p>Regardless of the method used, it is best to use the compiler defaults first and examine the results. If the defaults do not provide the expected results then experiment with generating more object files.
  </p>
 
  <p>You can use the 
	 <a href="GUID-B3F96324-4DCB-464C-A9AA-B708C0BEAD86.htm#GUID-B3F96324-4DCB-464C-A9AA-B708C0BEAD86"><span class="option">-ipo-jobs</span></a> (Linux and OS X) or 
	 <a href="GUID-B3F96324-4DCB-464C-A9AA-B708C0BEAD86.htm#GUID-B3F96324-4DCB-464C-A9AA-B708C0BEAD86"><span class="option">/Qipo-jobs</span></a> (Windows) option to control the number of commands, or jobs, executed during parallel builds.
  </p>
 
  <div class="section" id="GUID-DD32A79A-FC7B-42C0-A9CB-CB37F44DF11D"><h2 class="sectiontitle">Using 
		<span>-ipo<var>N</var> or 
		</span>/Qipo<var>N</var> to Create Multiple Object Files</h2> 
	  
	 <p>If you specify<span> 
		  <a href="GUID-FEF23B3B-D0F6-484F-8DC5-9AB1315A6431.htm#GUID-FEF23B3B-D0F6-484F-8DC5-9AB1315A6431"><span class="option">-ipo0</span></a> (Linux and OS X) or</span> 
		<a href="GUID-FEF23B3B-D0F6-484F-8DC5-9AB1315A6431.htm#GUID-FEF23B3B-D0F6-484F-8DC5-9AB1315A6431"><span class="option">/Qipo0</span></a> (Windows), which is the same as not specifying a value, the compiler uses heuristics to determine whether to create one or more object files based on the expected size of the application. The compiler generates one object file for small applications, and two or more object files for large applications. If you specify any value greater than 0, the compiler generates that number of object files, unless the value you pass a value that exceeds the number of source files. In that case, the compiler creates one object file for each source file then stops generating object files.
	 </p>
 
	 <p>The following example commands demonstrate how to use<span> 
		  <a href="GUID-FEF23B3B-D0F6-484F-8DC5-9AB1315A6431.htm#GUID-FEF23B3B-D0F6-484F-8DC5-9AB1315A6431"><span class="option">-ipo2</span></a> (Linux and OS X) or</span> 
		<a href="GUID-FEF23B3B-D0F6-484F-8DC5-9AB1315A6431.htm#GUID-FEF23B3B-D0F6-484F-8DC5-9AB1315A6431"><span class="option">/Qipo2</span></a> (Windows) to compile large programs.
	 </p>
 
	 
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-4757B9C5-82CA-4B1B-A327-C9B3F8B52214" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
		  <thead align="left"> 
			 <tr> 
				<th class="cellrowborder" align="left" valign="top" id="d538409e239">
				  <p>Operating System 
				  </p>

				</th>
 
				<th class="cellrowborder" align="left" valign="top" id="d538409e245">
				  <p>Example Command
				  </p>

				</th>
 
			 </tr>
 
		  </thead>
 
		  <tbody> 
			 <tr> 
				<td class="cellrowborder" align="left" valign="top" headers="d538409e239 ">
				  <p>Linux and OS X
				  </p>

				</td>
 
				<td class="cellrowborder" align="left" valign="top" headers="d538409e245 ">
				  <p><samp class="codeph">icpc -ipo2 -c a.cpp b.cpp</samp>
				  </p>

				</td>
 
			 </tr>
 
			 <tr> 
				<td class="cellrowborder" align="left" valign="top" headers="d538409e239 ">
				  <p>Windows
				  </p>

				</td>
 
				<td class="cellrowborder" align="left" valign="top" headers="d538409e245 ">
				  <p><samp class="codeph">icl /Qipo2 /c a.cpp b.cpp</samp>
				  </p>

				</td>
 
			 </tr>
 
		  </tbody>

		</table>
</div>
 
	 <p>Because the example command shown above, the compiler generates object files using an OS-dependent naming convention. On Linux and OS X, the example command results in object files named 
		<span class="filepath">ipo_out.o</span>, 
		<span class="filepath">ipo_out1.o</span>, 
		<span class="filepath">ipo_out2.o</span>, and 
		<span class="filepath">ipo_out3.o</span>. On Windows, the file names follow the same convention; however, the file extensions will be 
		<span class="filepath">.obj</span>.
	 </p>
 
	 <p>Link the resulting object files as shown in 
		<a href="GUID-BAC44C7F-5A85-45D7-9595-F2AA2595F399.htm#GUID-BAC44C7F-5A85-45D7-9595-F2AA2595F399">Using IPO</a> or 
		<a href="GUID-4555A569-67C0-42E7-A0E2-5E5CB05C21B0.htm#GUID-4555A569-67C0-42E7-A0E2-5E5CB05C21B0">Linking Tools and Options.</a>
	 </p>

  </div>
 
  <div class="section" id="GUID-7E5634ED-9EBD-4DF1-A10E-981D45CAD02D"><h2 class="sectiontitle">Creating the Maximum Number of Object Files</h2> 
	  
	 <p>Using 
		<a href="GUID-9D233AC0-BDB6-405D-A51A-F45CC081C9D4.htm#GUID-9D233AC0-BDB6-405D-A51A-F45CC081C9D4"><span class="option">-ipo-separate</span></a> (Linux and OS X) or 
		<a href="GUID-9D233AC0-BDB6-405D-A51A-F45CC081C9D4.htm#GUID-9D233AC0-BDB6-405D-A51A-F45CC081C9D4"><span class="option">/Qipo-separate</span></a> (Windows) allows you to force the compiler to generate the maximum number of true object files that the compiler will support during multiple object compilation.
	 </p>
 
	 <p>For example, if you passed example commands similar to the following:
	 </p>
 
	 
<div class="tablenoborder"><table cellpadding="4" summary="" id="GUID-6D721542-972B-4C5E-8523-56A21942F575" width="100%" frame="border" border="1" cellspacing="0" rules="all"> 
		  <thead align="left"> 
			 <tr> 
				<th class="cellrowborder" align="left" valign="top" id="d538409e360">
				  <p>Operating System 
				  </p>

				</th>
 
				<th class="cellrowborder" align="left" valign="top" id="d538409e366">
				  <p>Example Command
				  </p>

				</th>
 
			 </tr>
 
		  </thead>
 
		  <tbody> 
			 <tr> 
				<td class="cellrowborder" align="left" valign="top" headers="d538409e360 ">
				  <p>Linux and OS X
				  </p>

				</td>
 
				<td class="cellrowborder" align="left" valign="top" headers="d538409e366 ">
				  <p><samp class="codeph">icpc -ipo-separate -ipo-c a.o b.o c.o</samp>
				  </p>

				</td>
 
			 </tr>
 
			 <tr> 
				<td class="cellrowborder" align="left" valign="top" headers="d538409e360 ">
				  <p>Windows
				  </p>

				</td>
 
				<td class="cellrowborder" align="left" valign="top" headers="d538409e366 ">
				  <p><samp class="codeph">icl a.obj b.obj c.obj /Qipo-separate /Qipo-c</samp>
				  </p>

				</td>
 
			 </tr>
 
		  </tbody>

		</table>
</div>
 
	 <p>The compiler will generate multiple object files, which use the same naming convention discussed above. The first object file contains global variables. The other object files contain code for the functions or routines used in the source files.
	 </p>
 Link the resulting object files as shown in 
	 <a href="GUID-BAC44C7F-5A85-45D7-9595-F2AA2595F399.htm#GUID-BAC44C7F-5A85-45D7-9595-F2AA2595F399">Using IPO</a> or 
	 <a href="GUID-4555A569-67C0-42E7-A0E2-5E5CB05C21B0.htm#GUID-4555A569-67C0-42E7-A0E2-5E5CB05C21B0">Linking Tools and Options</a>.
  </div>
 
  <div class="section" id="GUID-37409C94-F42E-4FF5-A889-8BE05BE38D33"><h2 class="sectiontitle">Considerations for Large Program Compilation</h2> 
	  
	 <p>For many large programs, compiling with IPO can result in a single, large object file. Compiling to produce large objects can create problems for efficient compilation. During compilation, the compiler attempts to swap the memory usage during compiles; a large object file might result in poor swap usage, which could result in out-of-memory message or long compilation times. Using multiple, relatively small object files during compilation causes the system to use resources more efficiently.
	 </p>
 
  </div>
 
  </div>

  
<div class="familylinks">
<div class="parentlink"><strong>Parent topic:</strong>&nbsp;<a href="GUID-2C521F58-6303-4748-9736-A59A5B73B025.htm">Interprocedural Optimization (IPO)</a></div>
</div>
<div><br clear="all">
<div class="docfeedback">
<div><a href="http://www.intel.com/software/products/softwaredocs_feedback" target="_blank">Submit feedback on this help topic 
		  </a></div></div></div>

</body>
</html>
