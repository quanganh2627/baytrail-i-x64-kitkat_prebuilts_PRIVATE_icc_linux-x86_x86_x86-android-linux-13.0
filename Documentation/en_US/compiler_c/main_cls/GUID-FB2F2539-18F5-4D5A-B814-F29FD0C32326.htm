<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns:MSHelp="http://www.microsoft.com/MSHelp/" lang="en-us" xml:lang="en-us"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="DC.Type" content="topic">
<meta name="DC.Title" content="Intel&reg; Transactional Synchronization Extensions (Intel&reg; TSX) Overview">
<meta name="abstract" content="">
<meta name="description" content="">
<meta name="DC.Relation" scheme="URI" content="GUID-BAFE2B5E-6AA3-4283-BAB2-F36B00725EB3.htm">
<meta name="DC.Relation" scheme="URI" content="http://www.intel.com/software/products/softwaredocs_feedback">
<meta name="DC.Format" content="XHTML">
<meta name="DC.Identifier" content="GUID-FB2F2539-18F5-4D5A-B814-F29FD0C32326">
<meta name="DC.Language" content="en-US">
<link rel="stylesheet" type="text/css" href="intel_css_styles.css">
<title>Intel&reg; Transactional Synchronization Extensions (Intel&reg; TSX) Overview</title>
<xml>
<MSHelp:Attr Name="DocSet" Value="Intel"></MSHelp:Attr>
<MSHelp:Attr Name="Locale" Value="kbEnglish"></MSHelp:Attr>
<MSHelp:Keyword Index="F" Term="intel.cpp.intref_avx2_bk_rtm"></MSHelp:Keyword>
<MSHelp:Attr Name="TopicType" Value="kbReference"></MSHelp:Attr>
</xml>
</head>
<body id="GUID-FB2F2539-18F5-4D5A-B814-F29FD0C32326">
 <!-- ==============(Start:NavScript)================= -->
 <script src="NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
 <script language="JavaScript1.2" type="text/javascript">WriteNavLink(0);</script>
 <!-- ==============(End:NavScript)================= -->
<p id="header_text" style="margin-bottom : 20pt"><em>Intel&reg; C++ Compiler XE 13.1 User and Reference Guides</em></p>


 
  <h1 class="topictitle1">Intel&reg; Transactional Synchronization Extensions (Intel&reg; TSX) Overview</h1>
 
  <!-- 
  --> 
   
  <div><p> 
  </p>
 
    <p>Intel&reg; Transactional Synchronization Extensions (Intel&reg; TSX) allow the processor to determine dynamically whether threads need to serialize through lock-protected critical sections, and to perform serialization only when required. This lets the processor to expose and exploit concurrency hidden in an application due to dynamically unnecessary synchronization. 
    </p>
 
    <p>With Intel&reg; TSX, programmer-specified code regions (also referred to as transactional regions) are executed transactionally. If the transactional execution completes successfully, then all memory operations performed within the transactional region will appear to have occurred instantaneously when viewed from other logical processors. A processor makes architectural updates performed within the region visible to other logical processors only on a successful commit, a process referred to as an atomic commit. 
    </p>
 
    <p>Intel&reg; TSX also provides an 
      <samp class="codeph">XTEST</samp> instruction, allowing software to query whether the logical processor is transactionally executing in a transactional region identified by either HLE or RTM. 
    </p>
 
    <p>Since a successful transactional execution ensures an atomic commit, the processor executes the code region optimistically without explicit synchronization. If synchronization was unnecessary for that specific execution, execution can commit without any cross-thread serialization. If the processor cannot commit atomically, the optimistic execution fails. When this happens, the processor will roll back the execution, a process referred to as a transactional abort. On a transactional abort, the processor will discard all updates performed in the region, restore architectural state to appear as if the optimistic execution never occurred, and resume execution nontransactionally. 
    </p>
 
    <p>A processor can perform a transactional abort for numerous reasons. A primary cause is due to conflicting accesses between the transactionally executing logical processor and another logical processor. Such conflicting accesses may prevent a successful transactional execution. Memory addresses read from within a transactional region constitute the read-set of the transactional region and addresses written to within the transactional region constitute the write-set of the transactional region. Intel&reg; TSX maintains the read- and write-sets at the granularity of a cache line. A conflicting access occurs if another logical processor either reads a location that is part of the transactional region’s write-set or writes a location that is a part of either the read- or write-set of the transactional region. 
    </p>
 
    <p>Conflicting access typically means serialization is required for this code region. Intel&reg; TSX detects data conflicts at the granularity of a cache line, so unrelated data locations placed in the same cache line will be detected as conflicts. Transactional aborts may also occur due to limited transactional resources. The amount of data accessed in the region may exceed an implementation-specific capacity. Some instructions and system events may also cause transactional aborts. Frequent transactional aborts cause wasted cycles. 
    </p>
 
    <p>Intel&reg; TSX provide two software interfaces to specify regions of code for transactional execution. 
    </p>
 
    <p><strong>Hardware Lock Elision (HLE)</strong> 
    </p>
 
    <p>Hardware Lock Elision (HLE) is a legacy-compatible instruction set extension (comprising the 
      <samp class="codeph">XACQUIRE</samp> and 
      <samp class="codeph">XRELEASE</samp> prefixes) to specify transactional regions. HLE is for programmers who prefer the backward compatibility of the conventional mutual-exclusion programming model and would like to run HLE-enabled software on legacy hardware, but would like to take advantage of new lock elision capabilities on hardware with HLE support. 
    </p>
 
    <div class="Note"><h3 class="NoteTipHead">Note</h3>
      <p>Hardware Lock Elision (HLE) intrinsic functions apply to C/C++ applications for Windows* OS only.
      </p>
 
    </div> 
    <p><strong>Restricted Transactional Memory (RTM)</strong> 
    </p>
 
    <p>Restricted Transactional Memory (RTM) is a new instruction set interface (comprising the 
      <samp class="codeph">XBEGIN</samp>, 
      <samp class="codeph">XEND</samp>, and 
      <samp class="codeph">XABORT</samp> instructions) for programmers to define transactional regions in a more flexible manner than that possible with HLE. 
    </p>
 
    <p>RTM is for programmers who prefer a flexible interface to the transactional execution hardware. 
    </p>
 
  </div>
 
  
<div class="familylinks">
<div class="parentlink"><strong>Parent topic:</strong>&nbsp;<a href="GUID-BAFE2B5E-6AA3-4283-BAB2-F36B00725EB3.htm">Intrinsics for Intel&reg; Transactional Synchronization Extensions (Intel&reg; TSX)</a></div>
</div>
<div class="See Also"><br clear="all">
<div class="docfeedback">
<div><a href="http://www.intel.com/software/products/softwaredocs_feedback" target="_blank">Submit feedback on this help topic 
		  </a></div></div></div> 

</body>
</html>
