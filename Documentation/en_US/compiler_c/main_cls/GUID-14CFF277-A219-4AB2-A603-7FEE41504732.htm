<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns:MSHelp="http://www.microsoft.com/MSHelp/" lang="en-us" xml:lang="en-us"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="DC.Type" content="topic">
<meta name="DC.Title" content="Signaling-Computational Operations Functions">
<meta name="DC.subject" content="Intel&reg; IEEE 754-2008 Binary Floating-Point Conformance Library, signaling-computational operations, quiet_equal, quiet_not_equal, signaling_equal, signaling_greater, signaling_greater_equal, signaling_less, signaling_less_equal, signaling_not_equal, signaling_not_greater, signaling_less_ unordered, signaling_not_less, signaling_greater_unordered, quiet_greater, quiet_greater_equal, quiet_less, quiet_less_equal, quiet_unordered, quiet_not_greater, quiet_less_unordered, quiet_not_less, quiet_greater_unordered, quiet_ordered">
<meta name="keywords" content="Intel&reg; IEEE 754-2008 Binary Floating-Point Conformance Library, signaling-computational operations, quiet_equal, quiet_not_equal, signaling_equal, signaling_greater, signaling_greater_equal, signaling_less, signaling_less_equal, signaling_not_equal, signaling_not_greater, signaling_less_ unordered, signaling_not_less, signaling_greater_unordered, quiet_greater, quiet_greater_equal, quiet_less, quiet_less_equal, quiet_unordered, quiet_not_greater, quiet_less_unordered, quiet_not_less, quiet_greater_unordered, quiet_ordered">
<meta name="DC.Relation" scheme="URI" content="GUID-BCBC835E-526E-4C9D-A82C-25CAF9108E0A.htm">
<meta name="DC.Relation" scheme="URI" content="http://www.intel.com/software/products/softwaredocs_feedback">
<meta name="DC.Format" content="XHTML">
<meta name="DC.Identifier" content="GUID-14CFF277-A219-4AB2-A603-7FEE41504732">
<meta name="DC.Language" content="en-US">
<link rel="stylesheet" type="text/css" href="intel_css_styles.css">
<title>Signaling-Computational Operations Functions</title>
</head>
<body id="GUID-14CFF277-A219-4AB2-A603-7FEE41504732">
 <!-- ==============(Start:NavScript)================= -->
 <script src="NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
 <script language="JavaScript1.2" type="text/javascript">WriteNavLink(0);</script>
 <!-- ==============(End:NavScript)================= -->
<p id="header_text" style="margin-bottom : 20pt"><em>Intel&reg; C++ Compiler XE 13.1 User and Reference Guides</em></p>


 
  <h1 class="topictitle1">Signaling-Computational Operations Functions</h1>
 
   
  <div> <p> Many routines in the libbfp754 library are more highly optimized for Intel&reg; microprocessors than for non-Intel microprocessors.</p>
 
    <p>The Intel&reg; IEEE 754-2008 Binary Conformance Library supports the following functions for signaling-computational operations:</p>
 
    <div class="section" id="QUIET_EQUAL"><a name="QUIET_EQUAL"><!-- --></a><h2 class="sectiontitle"> quiet_equal</h2>
 <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is equal, returns zero (false) otherwise. The function signals invalid operation exception when signaling 
        <samp class="codeph">NaN</samp> is in the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_quiet_equal_binary32 (float x, float y);</samp><br><samp class="codeph">int __binary32_quiet_equal_binary64(float x, double y);</samp> 
        <br><samp class="codeph">int __binary64_quiet_equal_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_quiet_equal_ binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="QUIET_NOT_EQUAL"><a name="QUIET_NOT_EQUAL"><!-- --></a><h2 class="sectiontitle"> quiet_not_equal</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is not equal, returns zero (false) otherwise. The function signals invalid operation exception when signaling 
        <samp class="codeph">NaN</samp> is one of the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_quiet_not_equal_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_quiet_not_equal_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_quiet_not_equal_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_quiet_not_equal_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="SIGNALING_EQUAL"><a name="SIGNALING_EQUAL"><!-- --></a><h2 class="sectiontitle"> signaling_equal</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is equal, returns zero (false) otherwise. The function signals invalid operation exception when 
        <samp class="codeph">NaN</samp> is in the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_signaling_equal_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_signaling_equal_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_signaling_equal_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_signaling_equal_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="SIGNALING_GREATER"><a name="SIGNALING_GREATER"><!-- --></a><h2 class="sectiontitle"> signaling_greater</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is greater, returns zero (false) otherwise. The function signals invalid operation exception when 
        <samp class="codeph">NaN</samp> is in the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_signaling_greater_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_signaling_greater_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_signaling_greater_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_signaling_greater_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="SIGNALING_GREATER_EQUAL"><a name="SIGNALING_GREATER_EQUAL"><!-- --></a><h2 class="sectiontitle"> signaling_greater_equal</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is greater or equal, returns zero (false) otherwise. The function signals invalid operation exception when 
        <samp class="codeph">NaN</samp> is in the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_signaling_greater_equal_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_signaling_greater_equal_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_signaling_greater_equal_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_signaling_greater_equal_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="SIGNALING_LESS"><a name="SIGNALING_LESS"><!-- --></a><h2 class="sectiontitle"> signaling_less</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is less, returns zero (false) otherwise. The function signals invalid operation exception when 
        <samp class="codeph">NaN</samp> is in the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_signaling_less_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_signaling_less_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_signaling_less_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_signaling_less_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="SIGNALING_LESS_EQUAL"><a name="SIGNALING_LESS_EQUAL"><!-- --></a><h2 class="sectiontitle"> signaling_less_equal</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is less or equal, returns zero (false) otherwise. The function signals invalid operation exception when 
        <samp class="codeph">NaN</samp> is in the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_signaling_less_equal_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_signaling_less_equal_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_signaling_less_equal_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_signaling_less_equal_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="SIGNALING_NOT_EQUAL"><a name="SIGNALING_NOT_EQUAL"><!-- --></a><h2 class="sectiontitle"> signaling_not_equal</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is not equal, returns zero (false) otherwise. The function signals invalid operation exception when 
        <samp class="codeph">NaN</samp> is in the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_signaling_not_equal_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_signaling_not_equal_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_signaling_not_equal_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_signaling_not_equal_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="SIGNALING_NOT_GREATER"><a name="SIGNALING_NOT_GREATER"><!-- --></a><h2 class="sectiontitle"> signaling_not_greater</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is not greater, returns zero (false) otherwise. The function signals invalid operation exception when 
        <samp class="codeph">NaN</samp> is in the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_signaling_not_greater_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_signaling_not_greater_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_signaling_not_greater_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_signaling_not_greater_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="SIGNALING_LESS_UNORDERED"><a name="SIGNALING_LESS_UNORDERED"><!-- --></a><h2 class="sectiontitle"> signaling_less_unordered</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is less or unordered, returns zero (false) otherwise. The function signals invalid operation exception when 
        <samp class="codeph">NaN</samp> is in the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_signaling_less_unordered_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_signaling_less_unordered_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_signaling_less_unordered_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_signaling_less_unordered_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="SIGNALING_NOT_LESS"><a name="SIGNALING_NOT_LESS"><!-- --></a><h2 class="sectiontitle"> signaling_not_less</h2> 
       
      <p><strong> Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is not less, returns zero (false) otherwise. The function signals invalid operation exception when 
        <samp class="codeph">NaN</samp> is in the inputs. 
      </p>
 
      <p><strong>Calling interface: 
        </strong><br><samp class="codeph">int __binary32_signaling_not_less_ binary32(float x, float y);</samp><br><samp class="codeph"> int __binary32_signaling_not_less_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_signaling_not_less_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_signaling_not_less_binary64 (double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="SIGNALING_GREATER_UNORDERED"><a name="SIGNALING_GREATER_UNORDERED"><!-- --></a><h2 class="sectiontitle"> signaling_greater_unordered</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is greater or unordered, returns zero (false) otherwise. The function signals invalid operation exception when 
        <samp class="codeph">NaN</samp> is in the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph"> int __binary32_signaling_greater_unordered_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_signaling_greater_unordered_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_ signaling_greater_unordered_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_signaling_greater_unordered_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="QUIET_GREATER"><a name="QUIET_GREATER"><!-- --></a><h2 class="sectiontitle"> quiet_greater</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is greater, returns zero (false) otherwise. The function signals invalid operation exception when signaling 
        <samp class="codeph">NaN</samp> is one of the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_quiet_greater_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_quiet_greater_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_quiet_greater_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_quiet_greater_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="QUIET_GREATER_EQUAL"><a name="QUIET_GREATER_EQUAL"><!-- --></a><h2 class="sectiontitle"> quiet_greater_equal</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is greater or equal, returns zero (false) otherwise. The function signals invalid operation exception when signaling 
        <samp class="codeph">NaN</samp> is one of the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_quiet_greater_equal_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_quiet_greater_equal_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_quiet_greater_equal_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_quiet_greater_equal_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="QUIET_LESS"><a name="QUIET_LESS"><!-- --></a><h2 class="sectiontitle"> quiet_less</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is less, returns zero (false) otherwise. The function signals invalid operation exception when signaling 
        <samp class="codeph">NaN</samp> is one of the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_quiet_less_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_quiet_less_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_quiet_less_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_quiet_less_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="QUIET_LESS_EQUAL"><a name="QUIET_LESS_EQUAL"><!-- --></a><h2 class="sectiontitle"> quiet_less_equal</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is less or equal, returns zero (false) otherwise. The function signals invalid operation exception when signaling 
        <samp class="codeph">NaN</samp> is one of the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_quiet_less_equal_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_quiet_less_equal_binary64(float x, double y)</samp><br><samp class="codeph">int __binary64_quiet_less_equal_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_quiet_less_equal_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="QUIET_UNORDERED"><a name="QUIET_UNORDERED"><!-- --></a><h2 class="sectiontitle"> quiet_unordered</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is unordered, returns zero (false) otherwise. The function signals invalid operation exception when signaling 
        <samp class="codeph">NaN</samp> is one of the inputs 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_quiet_unordered_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_quiet_unordered_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_quiet_unordered_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_quiet_unordered_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="QUIET_NOT_GREATER"><a name="QUIET_NOT_GREATER"><!-- --></a><h2 class="sectiontitle"> quiet_not_greater</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is not greater, returns zero (false) otherwise. The function signals invalid operation exception when signaling 
        <samp class="codeph">NaN</samp> is one of the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_quiet_not_greater_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_quiet_not_greater_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_quiet_not_greater_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_quiet_not_greater_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="QUIET_LESS_UNORDERED"><a name="QUIET_LESS_UNORDERED"><!-- --></a><h2 class="sectiontitle"> quiet_less_unordered</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is less or unordered, returns zero (false) otherwise. The function signals invalid operation exception when signaling 
        <samp class="codeph">NaN</samp> is one of the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_quiet_less_unordered_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_quiet_less_unordered_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_quiet_less_unordered_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_quiet_less_unordered_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="QUIET_NOT_LESS"><a name="QUIET_NOT_LESS"><!-- --></a><h2 class="sectiontitle"> quiet_not_less</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is not less, returns zero (false) otherwise. The function signals invalid operation exception when signaling 
        <samp class="codeph">NaN</samp> is one of the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_quiet_not_less_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_quiet_not_less_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_quiet_not_less_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_quiet_not_less_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="QUIET_GREATER_UNORDERED"><a name="QUIET_GREATER_UNORDERED"><!-- --></a><h2 class="sectiontitle"> quiet_greater_unordered</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is greater or unordered, returns zero (false) otherwise. The function signals invalid operation exception when signaling 
        <samp class="codeph">NaN</samp> is one of the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_quiet_greater_unordered_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_quiet_greater_unordered_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_quiet_greater_unordered_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_quiet_greater_unordered_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
    <div class="section" id="QUIET_ORDERED"><a name="QUIET_ORDERED"><!-- --></a><h2 class="sectiontitle"> quiet_ordered</h2> 
       
      <p><strong>Description:</strong> The function returns 1 (true) if the relation between the two inputs 
        <samp class="codeph">x</samp> and 
        <samp class="codeph">y</samp> is ordered, returns zero (false) otherwise. The function signals invalid operation exception when signaling 
        <samp class="codeph">NaN</samp> is one of the inputs. 
      </p>
 
      <p><strong>Calling interface:</strong><br><samp class="codeph">int __binary32_quiet_ordered_binary32(float x, float y);</samp><br><samp class="codeph">int __binary32_quiet_ordered_binary64(float x, double y);</samp><br><samp class="codeph">int __binary64_quiet_ordered_binary32(double x, float y);</samp><br><samp class="codeph">int __binary64_quiet_ordered_binary64(double x, double y);</samp> 
      </p>
 
    </div>
 
  </div>
 
  
<div class="familylinks">
<div class="parentlink"><strong>Parent topic:</strong>&nbsp;<a href="GUID-BCBC835E-526E-4C9D-A82C-25CAF9108E0A.htm">Function List</a></div>
</div>
<div><br clear="all">
<div class="docfeedback">
<div><a href="http://www.intel.com/software/products/softwaredocs_feedback" target="_blank">Submit feedback on this help topic 
		  </a></div></div></div> 

</body>
</html>
